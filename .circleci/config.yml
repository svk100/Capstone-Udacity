version: 2.1

orbs:
  aws-eks: circleci/aws-eks@2.1.2
  kubernetes: circleci/kubernetes@1.3.0
  aws-cli: circleci/aws-cli@3.1.1

parameters:
  build:
    type: boolean
    default: false
  update:
    type: boolean
    default: false
  build-eks:
    type: boolean
    default: false
  test_deployment:
    type: boolean
    default: false
  blue_BD:
    type: boolean
    default: false

jobs:

  build-docker-image:
    docker:
      - image: cimg/python:3.10.4
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true

      - run:
          name: install dependencies
          command: |
            cd GreenApp
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            sudo chmod +x /bin/hadolint
      - run:
          name: run lint
          command: |
            cd GreenApp
            . venv/bin/activate
            make lint
      - run:
          name: create docker image
          command: |
            docker container ls
            cd GreenApp
            docker build -t greenapp .
            docker image ls
      - run:
          name: test docker image
          command: |
            cd GreenApp
            docker run -d -p 8000:80 greenapp
            if docker ps | grep 'greenapp'
            then
              echo 'Docker works fine'
            else
              echo 'Docker test failed'
              exit 1
            fi
      - run:
          name: upload docker image
          command: |
            cd GreenApp
            echo $docker_password | docker login -u $docker_username --password-stdin 
            docker tag greenapp svk100/greenapp
            docker container ls
            docker push svk100/greenapp

  build-dockerB-image:
    docker:
      - image: cimg/python:3.10.4
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true

      - run:
          name: install dependencies
          command: |
            cd BlueApp
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            sudo chmod +x /bin/hadolint
      - run:
          name: run lint
          command: |
            cd BlueApp
            . venv/bin/activate
            make lint
            exit 1
      # - run:
          # name: create docker image
          # command: |
            # docker container ls
            # cd BlueApp
            # docker build -t blueapp .
            # docker image ls
      # - run:
          # name: test docker image
          # command: |
            # cd BlueApp
            # docker run -d -p 8000:80 blueapp
            # if docker ps | grep 'blueapp'
            # then
              # echo 'Docker works fine'
            # else
              # echo 'Docker test failed'
              # exit 1
            # fi
      # - run:
          # name: upload docker image
          # command: |
            # cd BlueApp
            # echo $docker_password | docker login -u $docker_username --password-stdin 
            # docker tag blueapp svk100/blueapp
            # docker container ls
            # docker push svk100/blueapp

  build-eks-cluster:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      #- kubernetes/install-kubectl
      - aws-cli/setup
      - run:
          name: Install ekstcl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin
            sudo mv /tmp/eksctl /usr/local/bin
            chmod +x /usr/local/bin/kubectl
            eksctl version
            aws --version
            kubectl version --short --client
      - run:
          name: Build EKS Cluster
          command: |
            eksctl create cluster --name udacity-capstone --version 1.22 --region us-east-1 --node-type t2.micro --nodes-min 2 --nodes-max 2  --dry-run
      - run:
          name: Deploy to EKS
          command: |
            aws eks --region ${AWS_DEFAULT_REGION} update-kubeconfig --name udacity-capstone
            cat /home/circleci/.kube/config
            #kubectl get nodes
            kubectl apply -f eksConfig/LBConfig.yml
            kubectl apply -f eksConfig/deployment.yml

  update-eks-cluster:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - aws-cli/setup
      - run:
          name: Install eksctl and kubectl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            # curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
            # chmod +x ./kubectl
            # sudo mv ./kubectl /usr/local/bin
            # sudo mv /tmp/eksctl /usr/local/bin
            # chmod +x /usr/local/bin/kubectl
            # eksctl version
            # aws --version
            # kubectl version --short --client
      - run:
          name: Update EKS Cluster
          command: |
            aws eks --region ${AWS_DEFAULT_REGION} update-kubeconfig --name udacity-capstone
            # docker pull svk100/blueapp:latest
            # docker image ls
            # kubectl apply -f eksConfig/update.yml
            # kubectl rollout status deployment/udacity-capstone
            # kubectl rollout history deployment/udacity-capstone
            # kubectl get rs

  test-deployment:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - aws-cli/setup
      - run:
          name: Install eksctl and kubectl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin
            sudo mv /tmp/eksctl /usr/local/bin
            chmod +x /usr/local/bin/kubectl
            eksctl version
            aws --version
            kubectl version --short --client
      - run:
          name: Test Cluster
          command: |
            aws eks --region ${AWS_DEFAULT_REGION} update-kubeconfig --name udacity-capstone
            kubectl get svc
            kubectl get nodes
            kubectl get deployment
            kubectl get pod
            kubectl get pods
            kubectl get pods

      - run:
          name: Test deployment
          command: |
            if curl -s http://ad2ba3d2bfd9042899744f3bf32f224b-1144593518.us-east-1.elb.amazonaws.com/ | grep 'This'
            then
              echo 'Deployment Successful'
            else
              echo 'Deployment Failed'
              exit 1
            fi

workflows:
  build-workflow:
    when: << pipeline.parameters.build >>
    jobs:
      - build-docker-image
 
  build-eks-workflow:
    when: << pipeline.parameters.build-eks >>
    jobs:
      - build-eks-cluster

  test-deployment-workflow:
    when: << pipeline.parameters.test_deployment >>
    jobs:
      - test-deployment

  Build-Deploy-Blue-workflow:
    when: << pipeline.parameters.blue_BD >>
    jobs:
      - build-dockerB-image
      - update-eks-cluster:
          requires: [build-dockerB-image]
      - test-deployment:
          requires: [update-eks-cluster]
